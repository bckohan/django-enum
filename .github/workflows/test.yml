name: test

on: [push, pull_request, workflow_dispatch]

jobs:
  full-test:
    runs-on: ubuntu-latest
    # Service containers to run with `container-job`
    env:
      DATABASE: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        postgres-version: ['12', 'latest']
        psycopg-version: ['psycopg2', 'psycopg3']
        django-version:
          - 'Django~=3.2.0' # LTS April 2024
          - 'Django~=4.1.0' # December 2023
          - 'Django~=4.2.0' # LTS April 2026
        exclude:
          - postgres-version: '12'
            psycopg-version: 'psycopg3'
          - django-version: 'Django~=4.1.0'
            psycopg-version: 'psycopg3'
          - django-version: 'Django~=3.2.0'
            psycopg-version: 'psycopg3'
          - python-version: '3.7'
            django-version: 'Django~=4.1.0'
          - django-version: 'Django~=3.2.0'
            postgres-version: 'latest'
          - django-version: 'Django~=4.1.0'
            postgres-version: '12'
          - django-version: 'Django~=4.2.0'
            postgres-version: '12'
          - python-version: '3.7'
            django-version: 'Django~=4.2.0'
          - python-version: '3.11'
            django-version: 'Django~=3.2.0'

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:${{ matrix.postgres-version }}
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install Basic Dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry run pip install --upgrade pip
        poetry install --with ${{ matrix.psycopg-version }}
        poetry run pip install -U "${{ matrix.django-version }}"
    - name: No Optional Dependency Unit Tests
      run: |
        poetry run pytest --cov-fail-under=30
    - name: Install enum-properties
      run: |
        poetry install -E properties
        poetry run pip install -U "${{ matrix.django-version }}"
    - name: Unit Tests w/ enum-properties
      run: |
        poetry run pytest --cov-fail-under=30
    - name: Remove enum-properties
      run: |
        poetry run pip uninstall -y enum-properties
    - name: Install djangorestframework
      run: |
        poetry install -E djangorestframework
        poetry run pip install -U "${{ matrix.django-version }}"
    - name: Run Unit Tests w/ djangorestframework
      run: |
        poetry run pytest --cov-fail-under=30
    - name: Install django-filters
      run: |
        poetry install -E filters
        poetry run pip install -U "${{ matrix.django-version }}"
    - name: Run Unit Tests w/ django-filter
      run: |
        poetry run pytest --cov-fail-under=30
    - name: Install all deps
      run: |
        poetry install -E all
        poetry run pip install -U "${{ matrix.django-version }}"
    - name: Run Full Unit Tests
      run: |
        poetry run pytest
    - name: Run Static Analysis
      run: |
        poetry run pylint django_enum
        poetry run mypy django_enum
        poetry run doc8 -q doc
        poetry check
        poetry run pip check
        poetry run safety check --full-report
        poetry run python -m readme_renderer ./README.rst -o /tmp/README.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  sqlite:
    runs-on: ubuntu-latest
    env:
      DATABASE: sqlite
    strategy:
      matrix:
        python-version: [ '3.7', '3.11']
        mysqlclient-version: ['^1.0.3']
        django-version:
          - 'Django~=3.2.0' # LTS April 2024
          - 'Django~=4.2.0' # LTS April 2026
        exclude:
          - python-version: '3.7'
            django-version: 'Django~=4.2.0'
          - python-version: '3.11'
            django-version: 'Django~=3.2.0'

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install Dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry run pip install --upgrade pip
          poetry install -E all
          poetry run pip install -U "${{ matrix.django-version }}"
      - name: Run Full Unit Tests
        run: |
          poetry run pytest --cov-fail-under=95

  mysql:
    runs-on: ubuntu-latest
    env:
      DATABASE: mysql
      MYSQL_PASSWORD: root
      MYSQL_DATABASE: test
      MYSQL_USER: root
      MYSQL_HOST: localhost
      MYSQL_PORT: 3306
    strategy:
      matrix:
        python-version: [ '3.7', '3.11']
        mysql-version: ['5.7', 'latest']
        django-version:
          - 'Django~=3.2.0' # LTS April 2024
          - 'Django~=4.2.0' # LTS April 2026
        exclude:
          - python-version: '3.7'
            django-version: 'Django~=4.2.0'
          - python-version: '3.11'
            django-version: 'Django~=3.2.0'
          - python-version: '3.7'
            mysql-version: 'latest'
          - python-version: '3.11'
            mysql-version: '5.7'

    services:
      mysql:
        # Docker Hub image
        image: mysql:${{ matrix.mysql-version }}
        # Provide the password for mysql
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
        # Set health checks to wait until mysql has started
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 3306 on service container to the host
          - 3306:3306

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install Dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry run pip install --upgrade pip
          poetry install -E all --with mysql
          poetry run pip install -U "${{ matrix.django-version }}"
      - name: Run Full Unit Tests
        run: |
          poetry run pytest --cov-fail-under=95

  mariadb:
    runs-on: ubuntu-latest
    env:
      DATABASE: mariadb
      MARIADB_PASSWORD: root
      MARIADB_DATABASE: test
      MARIADB_USER: root
      MARIADB_HOST: localhost
      MARIADB_PORT: 3306
    strategy:
      matrix:
        python-version: [ '3.7', '3.11']
        mariadb-version: ['10.2', 'latest']
        django-version:
          - 'Django~=3.2.0' # LTS April 2024
          - 'Django~=4.2.0' # LTS April 2026
        exclude:
          - python-version: '3.7'
            django-version: 'Django~=4.2.0'
          - python-version: '3.11'
            django-version: 'Django~=3.2.0'
          - python-version: '3.7'
            mariadb-version: 'latest'
          - python-version: '3.11'
            mariadb-version: '10.2'

    services:
      mysql:
        # Docker Hub image
        image: mariadb:${{ matrix.mariadb-version }}
        # Provide the password for mysql
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
        # Set health checks to wait until mysql has started
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 3306 on service container to the host
          - 3306:3306

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install Dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry run pip install --upgrade pip
          poetry install -E all --with mysql
          poetry run pip install -U "${{ matrix.django-version }}"
      - name: Run Full Unit Tests
        run: |
          poetry run pytest --cov-fail-under=95
