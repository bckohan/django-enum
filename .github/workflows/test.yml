name: test

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13.0-rc.1']
        django-version:
          - '3.2' # LTS April 2024
          - '4.2' # LTS April 2026
          - '5.0' # April 2025
          - '5.1' # December 2025
        drf-version:
          - '3.14'
          - '3.15'
        exclude:
          - python-version: '3.8'
            django-version: '5.0'
          - python-version: '3.9'
            django-version: '5.0'
          - python-version: '3.11'
            django-version: '3.2'
          - python-version: '3.11'
            django-version: '3.2'
          - python-version: '3.12'
            django-version: '5.1'
          - python-version: '3.8'
            django-version: '5.1'
          - python-version: '3.9'
            django-version: '5.1'
          - python-version: '3.13.0-rc.1'
            django-version: '3.2'
          - python-version: '3.13.0-rc.1'
            django-version: '4.2'
          - python-version: '3.13.0-rc.1'
            django-version: '5.0'
          
          - django-version: '3.2'
            drf-version: '3.15'
          - django-version: '4.2'
            drf-version: '3.14'
          - django-version: '5.0'
            drf-version: '3.14'
          - django-version: '5.1'
            drf-version: '3.14'
            
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install Basic Dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry run pip install --upgrade pip
        poetry install
        poetry run pip install -U "Django~=${{ matrix.django-version }}"
    - name: No Optional Dependency Unit Tests
      run: |
        poetry run pytest --cov-fail-under=30
    - name: Install enum-properties
      run: |
        poetry install -E properties
        poetry run pip install -U "Django~=${{ matrix.django-version }}"
    - name: Unit Tests w/ enum-properties
      run: |
        poetry run pytest --cov-fail-under=30
    - name: Remove enum-properties
      run: |
        poetry run pip uninstall -y enum-properties
    - name: Install djangorestframework
      run: |
        poetry install -E djangorestframework
        poetry run pip install -U "Django~=${{ matrix.django-version }}"
        poetry run pip install -U "djangorestframework~=${{ matrix.drf-version }}"
    - name: Run Unit Tests w/ djangorestframework
      run: |
        poetry run pytest --cov-fail-under=30
    - name: Install django-filters
      run: |
        poetry install -E filters
        poetry run pip install -U "Django~=${{ matrix.django-version }}"
        poetry run pip install -U "djangorestframework~=${{ matrix.drf-version }}"
    - name: Run Unit Tests w/ django-filter
      run: |
        poetry run pytest --cov-fail-under=30
    - name: Install all deps
      run: |
        poetry install -E all
        poetry run pip install -U "Django~=${{ matrix.django-version }}"
        poetry run pip install -U "djangorestframework~=${{ matrix.drf-version }}"
    - name: Run Full Unit Tests
      run: |
        poetry run pytest
    - name: Run Static Analysis
      run: |
        poetry run pylint django_enum
        poetry run mypy django_enum
        poetry run doc8 -q doc
        poetry check
        poetry run pip check
        poetry run python -m readme_renderer ./README.rst -o /tmp/README.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
